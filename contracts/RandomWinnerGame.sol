// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol";

contract RandomWinnerGame is VRFConsumerBase, Ownable{
    
    // chainlink variables
    // amount of LINK to send with the request
    uint256 public fee;
    // ID of public key for which agianst randomness is requested
    bytes32 public keyHash;

    // players addresses
    address[] players;
    // max players
    uint8 public maxPlayers;
    // for indicating dame started or not
    bool public gameStarted;
    // entery fee for game
    uint256 public entryFee;
    // current game ID
    uint256 public gameId;

    // events
    // when game start
    event GameStarted(uint256 gameId, uint8 maxPlayers, uint256 entryFee);
    // when player joins
    event PlayerJoined(uint256 gameId, address player);
    // when game ends
    event GameEnded(uint256 gameId, address winner, bytes32 requestId);

    constructor(address vrfCoordinator, address linkToken, bytes32 vrfKeyHash, uint256 vrfFee) VRFConsumerBase(vrfCoordinator, linkToken){
        keyHash = vrfKeyHash;
        fee = vrfFee;
        gameStarted = false;
    }

    function startGame(uint8 _maxPlayers, uint256 _entryFee) public onlyOwner {
        require(!gameStarted, "Game is already running");

        //empty players array
        delete players;

        maxPlayers = _maxPlayers;
        entryFee = _entryFee;

        gameId += 1;

        emit GameStarted(gameId, maxPlayers, entryFee);
    }

    function joinGame() public payable {
        require(gameStarted, "Game has not started yet");

        require(msg.value == entryFee, "Fee sent is incoreect to entry fee");

        require(players.length < maxPlayers, "Game is full of players");

        players.push(msg.sender);

        emit PlayerJoined(gameId, msg.sender);

        if(players.length == maxPlayers){
            getRandomWinner();
        }
    }

    function getRandomWinner() private returns(bytes32 requestId) {

        // checking if the contract has enough link token for making call
        require(LINK.balanceOf(address(this)) >= fee, "Not enough Link Tokens");

        return requestRandomness(keyHash, fee);
    }

    // this function is called by VRF Coordinator after requestRandomness() gets called
    // This function is overrided to act upon the random number generated by Chainlink VRF.
    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual override {
        uint256 winderIndex = randomness % players.length;

        address winner = players[winderIndex];

        (bool sent, ) = winner.call{value: address(this).balance}("");

        require(sent, "Failed to send ethers to winner");

        emit GameEnded(gameId, winner, requestId);
        gameStarted = false;
    }

    receive() external payable{}
    fallback() external payable{} 
}

